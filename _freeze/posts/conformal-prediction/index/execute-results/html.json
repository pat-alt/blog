{
  "hash": "6ae0840f9a262d6c82e2e414c51c2632",
  "result": {
    "markdown": "---\ntitle: Conformal Prediction\nsubtitle: From scratch in Julia Language\nauthor: Patrick Altmeyer\ndate: '2022-10-25'\ncategories:\n  - probabilistic programming\n  - uncertainty\n  - Julia\ndescription: A very gentle introduction to Conformal Prediction from the bottom up with examples in Julia language.\nimage: www/intro.gif\ndraft: false\n---\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing Pkg; Pkg.activate(\"posts/conformal-prediction\")\n```\n:::\n\n\n<div class=\"intro-gif\">\n  <figure>\n    <img src=\"www/intro.gif\">\n    <figcaption>A Bayesian Neural Network gradually learns.</figcaption>\n  </figure>\n</div>\n\nA first crucial step towards building trustworthy AI systems is to be transparent about predictive uncertainty. Model parameters are random variables and their values are estimated from noisy data. That inherent stochasticity feeds through to model predictions and should to be addressed at the very least in order to avoid overconfidence in models. Beyond that obvious concern, it turns out that quantifying model uncertainty actually opens up a myriad of possibilities to improve up- and downstream modeling tasks like active learning and explainability. In Bayesian Active Learning, for example, uncertainty estimates are used to guide the search for new input samples, which can make ground-truthing tasks more efficient [@houlsby2011bayesian]. With respect to model performance in downstream tasks, uncertainty quantification can be used to improve model calibration and robustness [@lakshminarayanan2016simple]. \n\nIn previous posts we have looked at how uncertainty can be quantified in the Bayesian context. Since in Bayesian modeling we are generally concerned with estimated posterior distributions, we get uncertainty estimates almost as a byproduct. This is great for all intends and purposes, but it hinges on assumptions about prior distributions. Personally, I have no quarrel with the idea of making prior distributional assumptions. On the contrary, I think the Bayesian framework formalizes the idea of integrating prior information in models and therefore provides a powerful toolkit for conducting science. Still, in some cases this requirement may be seen as too restrictive or we may simply lack prior information. \n\n## üëâ Enter: Conformal Prediction\n\nConformal Prediction (CP) promises to be a easy-to-understand, distribution-free and model-agnostic way to generate statistically rigorous uncertainty estimates. That's quite a mouthful, so let's break it down: firstly, as I will hopefully manage to illustrate in this post, the underlying concepts truly are fairly straight-forward to understand; secondly, CP indeed relies on only minimal distributional assumptions; thirdly, common procedures to generate conformal predictions really do apply almost universally to all supervised models, therefore making the framework very intriguing to the ML community; and, finally, CP does in fact come with a coverage guarantee that ensures that conformal prediction sets contain the true value with a user-chosen probability. For a formal proof of this *marginal coverage* property and a detailed introduction to the topic, I recommend @angelopoulos2021gentle. \n\n:::{.callout-note}\nIn what follows we will loosely treat the tutorial by @angelopoulos2021gentle and the general framework it sets as a reference. You are not expected to have read the paper, but I also won't reiterate any details here.\n:::\n\n## üíª Conformal Prediction in Julia\n\nIn this section of this first post on CP we will see how *split conformal prediction* (SCP) can be implemented in Julia to be compatible with any of the many supervised machine learning models available in [MLJ](https://alan-turing-institute.github.io/MLJ.jl/dev/): a beautiful, comprehensive machine learning framework funded by the [Alan Turing Institute](https://www.turing.ac.uk/) and the [New Zealand Strategic Science Investment Fund](https://www.mbie.govt.nz/science-and-technology/science-and-innovation/funding-information-and-opportunities/investment-funds/strategic-science-investment-fund/ssif-funded-programmes/university-of-auckland/). \n\nWe consider a simple multi-class prediction problem. Let $(X_i, Y_i), \\ i=1,...,n$ denote our feature-label pairs and let $\\mu: \\mathcal{X} \\mapsto \\mathcal{Y}$ denote the mapping from features to labels. For illustration purposes we will use the iris dataset. \n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing MLJ\nusing Random\nRandom.seed!(42)\n\n# Data:\nX, y = @load_iris\ntrain, test = partition(eachindex(y), 0.8, shuffle=true)\n```\n:::\n\n\nSplit conformal prediction (also elsewhere referred to as *inductive* conformal prediction) can then be summarized as follows:\n\n1. Partition the training into a proper training set and a separate calibration set: $\\mathcal{D}_n=\\mathcal{D}^{\\text{train}} \\cup \\mathcal{D}^{\\text{cali}}$.\n2. Train the machine learning model on the proper training set: $\\hat\\mu_{i \\in \\mathcal{D}^{\\text{train}}}(X_i,Y_i)$.\n3. Compute nonconformity scores, $\\mathcal{S}$, using the calibration data $\\mathcal{D}^{\\text{cali}}$ and the fitted model $\\hat\\mu_{i \\in \\mathcal{D}^{\\text{train}}}$. \n4. For a user-specified desired coverage ratio $(1-\\alpha)$ compute the corresponding quantile, $\\hat{q}$, of the empirical distribution of nonconformity scores, $\\mathcal{S}$.\n5. For the given quantile and test sample $X_{\\text{test}}$, form the corresponding conformal prediction set: \n\n$$\nC(X_{\\text{test}})=\\{y:s(X_{\\text{test}},y) \\le \\hat{q}\\}\n$$ {#eq-set}\n\nThe code below implements the simplest form of this procedure in Julia. It is lifted from the source code of [`ConformalPrediction.jl`]: a package for CP in Julia that I have been working on. As a first important step, we begin by defining a concrete type `SimpleInductiveClassifier` that wraps a supervised model from [`MLJ.jl`] and reserves additional fields for a few hyperparameters. As a second step, we define the training procedure, which includes the data-splitting and calibration step. Finally, as a third step we implement the procedure in @eq-set to compute the conformal prediction set.\n\n<script src=\"https://gist.github.com/pat-alt/6f0dfeb471dca927387a46f93ab5ee1b.js\"></script>\n\nNow let's take this to our data. To illustrate the package functionality we will use the package API to construct our conformal predictor. We first define our atomic machine learning model following standard [`MLJ.jl`](https://alan-turing-institute.github.io/MLJ.jl/v0.18/) conventions. Using [`ConformalPrediction.jl`](https://github.com/pat-alt/ConformalPrediction.jl) we then wrap our atomic model into a conformal model using the standard API call `conformal_model`. To train and predict from our conformal model we can then rely on the conventional [`MLJ.jl`](https://alan-turing-institute.github.io/MLJ.jl/v0.18/) procedure again. The final predictions are set-valued.\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n# Model:\nEvoTreeClassifier = @load EvoTreeClassifier pkg=EvoTrees\nmodel = EvoTreeClassifier() \n\n# Training:\nusing ConformalPrediction\nconf_model = conformal_model(model; coverage=.9)\nmach = machine(conf_model, X, y)\nfit!(mach, rows=train)\n\n# Conformal Prediction:\nXtest = selectrows(X, first(test))\nytest = y[first(test)]\npredict(mach, Xtest)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nimport EvoTrees ‚úî\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=199}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>                    <span class=\"ansi-bright-white-fg ansi-bold\">UnivariateFinite{Multiclass{3}}</span>      \n              <span class=\"ansi-bright-black-fg\">‚îå                                        ‚îê</span> \n   versicolor <span class=\"ansi-bright-black-fg\">‚î§</span><span class=\"ansi-green-fg\">‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†</span> 0.8198826778948226 <span class=\"ansi-bright-black-fg\"> </span> \n              <span class=\"ansi-bright-black-fg\">‚îî                                        ‚îò</span> </pre>\n```\n:::\n\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nconf_model = conformal_model(model; coverage=1.0-1e-10)\nmach = machine(conf_model, X, y)\nfit!(mach, rows=train)\n\n# Conformal Prediction:\nXtest = selectrows(X, first(test))\nytest = y[first(test)]\npredict(mach, Xtest)[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=200}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>                    <span class=\"ansi-bright-white-fg ansi-bold\">UnivariateFinite{Multiclass{3}}</span>      \n              <span class=\"ansi-bright-black-fg\">‚îå                                        ‚îê</span> \n       setosa <span class=\"ansi-bright-black-fg\">‚î§</span><span class=\"ansi-green-fg\">‚ñ†‚ñ†</span> 0.09005168145564542                  <span class=\"ansi-bright-black-fg\"> </span> \n   versicolor <span class=\"ansi-bright-black-fg\">‚î§</span><span class=\"ansi-green-fg\">‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†</span> 0.8198826778948226 <span class=\"ansi-bright-black-fg\"> </span> \n    virginica <span class=\"ansi-bright-black-fg\">‚î§</span><span class=\"ansi-green-fg\">‚ñ†‚ñ†</span> 0.09006564064953211                  <span class=\"ansi-bright-black-fg\"> </span> \n              <span class=\"ansi-bright-black-fg\">‚îî                                        ‚îò</span> </pre>\n```\n:::\n\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nconf_model = conformal_model(model; coverage=1e-10)\nmach = machine(conf_model, X, y)\nfit!(mach, rows=train)\n\n# Conformal Prediction:\nXtest = selectrows(X, first(test))\nytest = y[first(test)]\npredict(mach, Xtest)[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=201}\n```\nmissing\n```\n:::\n:::\n\n\n## üèÉ‚Äç‚ôÄÔ∏è TL;DR\n\nImplementing CP directly on top of an existing, powerful machine learning toolkit demonstrates the potential usefulness of this framework to the ML community. \n\n## üì¶ Related Packages\n\n## üìö Further Resources\n\nChances are that you have already come across the Awesome Conformal Prediction [repo](https://github.com/valeman/awesome-conformal-prediction): @manokhin2022awesome provides a comprehensive, up-to-date overview of resources related to the conformal prediction. Among the listed articles you will also find @angelopoulos2021gentle, which inspired much of this post. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}